<?php

/**
 * BaseService
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property clob $description
 * @property decimal $unit_cost
 * @property string $measurement_unit
 * @property enum $type
 * @property Doctrine_Collection $Items
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method clob                getDescription()      Returns the current record's "description" value
 * @method decimal             getUnitCost()         Returns the current record's "unit_cost" value
 * @method string              getMeasurementUnit()  Returns the current record's "measurement_unit" value
 * @method enum                getType()             Returns the current record's "type" value
 * @method Doctrine_Collection getItems()            Returns the current record's "Items" collection
 * @method Service             setId()               Sets the current record's "id" value
 * @method Service             setDescription()      Sets the current record's "description" value
 * @method Service             setUnitCost()         Sets the current record's "unit_cost" value
 * @method Service             setMeasurementUnit()  Sets the current record's "measurement_unit" value
 * @method Service             setType()             Sets the current record's "type" value
 * @method Service             setItems()            Sets the current record's "Items" collection
 * 
 * @package    limbo
 * @subpackage model
 * @author     Damian Suarez / Laura Melo
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseService extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('service');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('unit_cost', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             ));
        $this->hasColumn('measurement_unit', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'labor',
              1 => 'replacement',
             ),
             'default' => 'labor',
             ));


        $this->setAttribute(Doctrine_Core::ATTR_EXPORT, Doctrine_Core::EXPORT_ALL);

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Item as Items', array(
             'refClass' => 'ServiceItem',
             'local' => 'item_id',
             'foreign' => 'service_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}